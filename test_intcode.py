import pytest
import aocintcode

@pytest.mark.parametrize("program,out", [
    ("1,0,0,0,99", "2,0,0,0,99"),
    ("2,3,0,3,99", "2,3,0,6,99"),
    ("2,4,4,5,99,0", "2,4,4,5,99,9801"),
    ("1,1,1,4,99,5,6,0,99", "30,1,1,4,2,5,6,0,99"),
    ("1,12,2,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,6,19,1,19,6,23,2,23,6,27,2,6,27,31,2,13,31,35,1,9,35,39,2,10,39,43,1,6,43,47,1,13,47,51,2,6,51,55,2,55,6,59,1,59,5,63,2,9,63,67,1,5,67,71,2,10,71,75,1,6,75,79,1,79,5,83,2,83,10,87,1,9,87,91,1,5,91,95,1,95,6,99,2,10,99,103,1,5,103,107,1,107,6,111,1,5,111,115,2,115,6,119,1,119,6,123,1,123,10,127,1,127,13,131,1,131,2,135,1,135,5,0,99,2,14,0,0",
        "3224742,12,2,2,1,1,2,3,1,3,4,3,1,5,0,3,2,1,6,24,1,19,6,26,2,23,6,52,2,6,27,104,2,13,31,520,1,9,35,523,2,10,39,2092,1,6,43,2094,1,13,47,2099,2,6,51,4198,2,55,6,8396,1,59,5,8397,2,9,63,25191,1,5,67,25192,2,10,71,100768,1,6,75,100770,1,79,5,100771,2,83,10,403084,1,9,87,403087,1,5,91,403088,1,95,6,403090,2,10,99,1612360,1,5,103,1612361,1,107,6,1612363,1,5,111,1612364,2,115,6,3224728,1,119,6,3224730,1,123,10,3224734,1,127,13,3224739,1,131,2,3224741,1,135,5,0,99,2,14,0,0"),
    ("1002,4,3,4,33", "1002,4,3,4,99"),
    ("1101,100,-1,4,0", "1101,100,-1,4,99"),
    ])
def test_program_a(program, out):
    prog = aocintcode.Program(program)
    assert program == str(prog)
    prog.run()
    assert out == str(prog)

@pytest.mark.parametrize("program,in_data,out_data", [
    ("3,0,4,0,99", [3141], [3141]),
    ("3,9,8,9,10,9,4,9,99,-1,8", [8], [1]),
    ("3,9,8,9,10,9,4,9,99,-1,8", [5], [0]),
    ("3,9,7,9,10,9,4,9,99,-1,8", [7], [1]),
    ("3,9,7,9,10,9,4,9,99,-1,8", [8], [0]),
    ("3,9,7,9,10,9,4,9,99,-1,8", [9], [0]),
    ("3,3,1108,-1,8,3,4,3,99", [8], [1]),
    ("3,3,1108,-1,8,3,4,3,99", [1], [0]),
    ("3,3,1107,-1,8,3,4,3,99", [0], [1]),
    ("3,3,1107,-1,8,3,4,3,99", [10], [0]),
    ("3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9", [0], [0]),
    ("3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9", [100], [1]),
    ("3,3,1105,-1,9,1101,0,0,12,4,12,99,1", [0], [0]),
    ("3,3,1105,-1,9,1101,0,0,12,4,12,99,1", [-1], [1]),
    ("3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99", [4], [999]),
    ("3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99", [8], [1000]),
    ("3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99", [9], [1001]),
    ])
def test_program_b(program, in_data, out_data):
    prog = aocintcode.Program(program)
    prog.set_input(iter(in_data))
    assert program == str(prog)
    prog_out_data = list(prog)
    assert out_data == prog_out_data


@pytest.mark.parametrize("program, phases, signal_out", [
    ("3,15,3,16,1002,16,10,16,1,16,15,15,4,15,99,0,0",
    [4,3,2,1,0], 43210),
    ("3,23,3,24,1002,24,10,24,1002,23,-1,23,101,5,23,23,1,24,23,23,4,23,99,0,0",
    [0,1,2,3,4], 54321),
    ("3,31,3,32,1002,32,10,32,1001,31,-2,31,1007,31,0,33,1002,33,7,33,1,33,31,31,1,32,31,31,4,31,99,0,0,0",
    [1,0,4,3,2], 65210),
    ])
def test_control_amps(program, phases, signal_out):
    assert signal_out == aocintcode.control_amps(program, phases)
